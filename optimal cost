#include <stdio.h>

int min(int a, int b) {
    return (a < b) ? a : b;
}

int findOptimalCost(int grid[3][3], int m, int n) {
    int dp[3][3];
    dp[0][0] = grid[0][0];

    // Fill the first row and column
    for (int i = 1; i <= m; i++)
        dp[i][0] = dp[i - 1][0] + grid[i][0];
    for (int j = 1; j <= n; j++)
        dp[0][j] = dp[0][j - 1] + grid[0][j];

    // Fill the rest of the dp array
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]);
        }
    }

    return dp[m][n];
}

int main() {
    int grid[3][3] = {{1, 3, 1},
                      {1, 5, 1},
                      {4, 2, 1}};
    int m = 2; // Number of rows
    int n = 2; // Number of columns

    int optimalCost = findOptimalCost(grid, m, n);
    printf("Optimal cost: %d\n", optimalCost);

    return 0;
}
